===============================================================================
=    V I M 教 本 (チュートリアル) へ よ う こ そ   -  Version 1.7 modKN01     =
===============================================================================
     Vim は、このチュートリアルで説明するには多すぎる程のコマンドを備えた非常
     に強力なエディターです。このチュートリアルは、あなたが Vim を万能エディ
     ターとして使いこなせるようになるのに十分なコマンドについて説明します
     チュートリアルを完了するのに必要な時間は、覚えたコマンドを試すのにどれだ
     け時間を使うのかにもよりますが、およそ25から30分です。
     ATTENTION:

     以下の練習用コマンドにはこの文章を変更するものもあります。練習を始める前
     にバックアップを作成しましょう。

     一旦　Escを押した後に　:q! としてvimを終了し
     cp  vimtutor.txt  vimtutor.backup
     としておけば、いつでも 
     cp  vimtutor.backup  vimtutor.txt 
     とすることでやり 直せます

     このチュートリアルは、使うことで覚えられる仕組みになっています
     正しく学習するにはコマンドを実際に試さなければ ならないのです。
     文章を読んだだけでは、きっと忘れてしまいます!。
     さぁ、Capsロック(Shift-Lock)キーが押されていないことを確認した後、画面に
     レッスン1.1 が全部表示されるところまで、j キーを押してカーソルを移動しま
     しょう。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 レッスン 1.1:  カーソルの移動


       ** カーソルを移動するには、示される様に h,j,k,l を押します **
          手はホームポジションのまま右手だけで操作します
	     ^
	     k		    ヒント:  h キーは左方向に移動します。
       < h	 l >		     l キーは右方向に移動します。
	     j			     j キーは下 kキーは上　です。
	     v
  1. 移動に慣れるまで、スクリーンでカーソル移動させましょう。

  2. 下へのキー(j)を押しつづけると、連続して移動できます。
     これで次のレッスンに移動する方法がわかりましたね。
     一旦、上のレッスン１．１までカーソルを移動してから
  3. 下へのキー(j)を使って、レッスン1.2 に移動しましょう。

Note: キーをタイプしても思い通りにカーソルが動かなくなったら
　  　、<ESC>を押してノーマルモードにします。
      それから入力しようとしていたコマンドを再入力しましょう。

Note: キーボード右下の矢印のカーソルキーでも移動できます。
      しかし hjkl に一度慣れてしまえば、はるかに速く移動することができるでしょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 レッスン 1.2: VIM の起動と終了


  !! NOTE: 以下のあらゆるステップを行う前に、このレッスンを読みましょう!!

  1. <ESC>キーを押しましょう。(確実にノーマルモードにするため)

  2. 次のようにタイプ:		:q! <ENTER>
     これにより編集した内容を保存せずにエディタが終了します。

  3. シェルプロンプトが出てきたら、ふたたびvimでこのファイルを開きます
     をタイプします。
     そのコマンドは:		vim vimtutor.txt <ENTER>

  4. これまでのステップを覚え自信がついたならば、ステップ 1 から 3 までを実
     際に試して、Vim を1度終了してから再び起動しましょう。

  5. :set number <ENTER> とすると、左端に行番号がつけられます。行番号をなくすには
　　 :set nonumber <ENTER> とします。

NOTE:  :q! <ENTER> は全ての編集作業の結果による変更を破棄します。
       編集結果をファイルに保存する方法についてもあとで勉強していきましょう。

  6. 1.3までカーソルを移動させましょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       レッスン 1.3: テキスト編集 - 削除


    ** ノーマルモードにてカーソルの下の文字を削除するには x を押します **

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. 間違いを修正するために、削除する最初の文字までカーソルを移動します。

  3. 不必要な文字を x を押して削除しましょう。

  4. 文が正しくなるまで（下の分と同じになるまで） ステップ 2 から 4 を繰り返
     しましょう。

---> Aa rrabbittt jjumpedd overr tthe moooon.
     A rabit jumped over the moon.

  5. 行が正しくなったら、レッスン 1.4 へ進みましょう。

NOTE:全てのレッスンを通じて、ただ覚えようとするのではなく実際にやってみましょう。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       レッスン 1.4: テキスト編集 - 挿入


	 ** ノーマルモードにてテキストを挿入するには i を押します **

  1. 以下の ---> と示された最初の行にカーソルを移動しましょう。

  2. 1行目を2行目と同じにするために、テキストを挿入しなければならない位置
     の次の文字にカーソルを移動します。 (lacksのはじめのl)

  3. i キーを押してから、追加が必要な文字をタイプしましょう。

  4. 間違いを修正したら <ESC> を押してコマンドモードに戻り、正しい文になる様
     にステップ 2 から 4 を繰り返しましょう。

---> This lacks words.
---> This line lacks some words.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     レッスン 1.5: テキスト編集 - 追加

           ** テキストをカーソルの後に追加するには a を押しましょう **

  1. 以下の ---> と示された最初の行にカーソルを移動しましょう。
     行末のtの上にカーソルを置きます。

  2. a をタイプするとカーソルの後ろ(一つ右)から文字を書き込んでいくことができます

  3. テキストを追加し終えたら、 <ESC> を押してノーマルモードに戻りましょう。

  4. 2行目の ---> と示された場所へ移動し、修正しましょう。
     wrのあとにo, 右端のnのあとに文章の残りをつけくわえます
     それぞれの入力のあとにESCを押してインサートモードからノーマルモードに戻ります

---> Here is a wrong t
     Here is a wrong text.
---> Here is another wrn
     Here is another wrong text.

  5. テキストの追加が軽快になってきたらレッスン 1.6 へ進みましょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     レッスン 1.6: ファイルの編集


	   ** ファイルを保存して終了するには :wq とタイプします **

  !! NOTE: この操作はファイル(vimtutor.txt)を上書きします !!

  1. <Esc> キーを押してノーマルモードに入ります。

  2. 変更をファイルに保存します:  :wq  <ENTER>

  3. vim tutor を再度起動し、以下の要約へ進みましょう。

  4. 以上のステップを読んで理解した上でこれを実行しましょう。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				レッスン 1 要約


  1. カーソルは矢印キーもしくは hjkl キーで移動します。
	 h (左)		j (下)         k (上)	    l (右)

  2. Vim を起動するにはプロンプトから vim ファイル名 <ENTER> とタイプします。

  3. Vim を終了するには	   <ESC> :q!	 <ENTER>  とタイプします(変更を破棄)。
               もしくは	   <ESC> :wq	 <ENTER>  とタイプします(変更を保存)。

  4. カーソルの下の文字を削除するには、ノーマルモードで x とタイプします。

  5. カーソルの位置に文字を挿入するには、ノーマルモードで i とタイプします。
	 i     テキストをタイプ	<ESC>         カーソル位置の前に挿入
	 a     テキストを追加   <ESC>         カーソル位置の後に追加

NOTE:    ノーマルモードでiやaを押すとインサートモードに入りカーソル移動などが、
         できなくなります<ESC> キーを押すとインサートモードからノーマルモード
         に移行します。

さて、続けてレッスン 2 を始めましょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			   レッスン 2.1: 削除コマンド


	    ** 単語の末尾までを削除するには dw とタイプしましょう **

  1. ノーマルモードであることを確認するために <ESC> を押しましょう。

  2. 以下の ---> と示された行にカーソルを移動しましょう。

  3. 消したい単語(paper, pleasant)の先頭にカーソルを移動しましょう。

  4. 単語を削除するために dw とタイプしましょう。

  NOTE: タイプすると、dw という文字がスクリーンの最下行に現われます。

---> This sentence paper includes several pleasant unnecessary words.
     This sentence includes several unnecessary words.

  文が正しくなるまで繰り返し、レッスン 2.2 へ進みましょう。
  カーソルが単語の途中にあるときには、dwを押すとカーソル位置から単語
  の終わりまでが消去されます



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       レッスン 2.2: その他の削除コマンド


	     ** 行の末尾までを削除するには d$ とタイプしましょう **

  1. ノーマルモードであることを確認するのに <ESC> を押しましょう。

  2. 以下の ---> と示された行にカーソルを移動しましょう。

  3. 下の正しい文の末尾の上へカーソルを移動しましょう(最初の . の後です)。

  4. 行末まで削除するのに d$ とタイプしましょう。

---> Someone typed the last part of this sentence twice. this sentence twice.
     Someone typed the last part of this sentence twice.


  5. d$とはどういうことか理解するために、レッスン 2.3 へ進みましょう。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     レッスン 2.3: オペレータとモーション


  多くのコマンドはオペレータとモーションからテキストに変更を加えます。
  削除コマンド d$ のモーションとオペレータは次の様になっています:

  	d   モーション  何をするか　　d= 削除

        $   オペレータ　何に          $= カーソル位置から行末まで

  オペレータの例:
    w - カーソル位置から空白を含む単語の末尾まで。
    e - カーソル位置から空白を含まない単語の末尾まで。
    $ - カーソル位置から行末まで。

  ですので de とタイプすると、カーソル位置から単語の終わりまでを削除します。

NOTE: ノーマルモードにてコマンドなしにモーションを押してみましょう。
      カーソルが例で示される位置に移動するはずです。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 レッスン 2.4: モーションにカウント(繰り返し回数)を使用する

      ** 何回も行いたい繰り返しのモーションの前に数値をタイプします。 **

  1. 以下の ---> と示された行の先頭にカーソルを移動します。
  2. dw をタイプすると一つの単語が消せます
  3. 2dw をタイプすると二つの単語が消せます。
  4. e をタイプすると後の末尾に移動します。
  5. 3e をタイプして3つ目の単語の終端に移動します。
  6. 0 (ゼロ)をタイプして行頭に移動します。

  7. ステップ 2 と 3 を違う数値と使って繰り返します。

---> This is just a line with words you can move around in.
     This is just a line with words you can move around in.

  6. レッスン 2.5 に進みましょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	   レッスン 2.5: 多くを削除するためにカウントを使用する


  ** オペレータとカウントをタイプすると、その操作が複数回繰り返されます。 **

  既述の削除のオペレータとモーションの組み合わせにカウントを追加することで、
  より多くの削除が行えます:
	   数値   モーション オペレータ

  1. ---> と示された行の行頭部分にカーソルを移動しましょう。

  2. 大文字 の単語2つ ABC と DE を 2dw とタイプして削除します。

  3. もう２組の大文字だけの連続した単語を、2のコマンドと異なるカウントを指定して、
     削除し下の文と同じにします

---> This ABC DE sentence FGHI JK LMN OP is Q RS TUV clean now.
     This sentence is clean now.

NOTE:  オペレータ d とモーションの間にカウントを使った場合、オペレータのない
       場合のモーションのように動作します。
       例: 3dw と d3w は同等で、3w（三つの単語） を削除します。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 レッスン 2.6: 行の操作

		 ** 行全体を削除するには dd とタイプします **

  行全体を削除する頻度は高いので、Viのデザイナーは行の削除を d を2回タイプと
  いう簡単なものに決めました。

  1. 以下の句の2)行目にカーソルを移動します。
  2. dd とタイプして行を削除します。
  3. さらに4)行目に移動します。
  4. 2dd とタイプして2行を削除します。

--->  1)  バラは赤い、
--->  2)  つまらないものは楽しい、
--->  3)  スミレは青い、
--->  4)  私は車をもっている、
--->  5)  時計が時刻を告げる、
--->  6)  砂糖は甘い
--->  7)  オマエモナー


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 レッスン 2.7: やり直しコマンド

  ** 最後のコマンドを取り消すには u を押します。U は行全体の取消です。 **

  1. 以下の ---> と示された行にカーソルを移動し、最初の間違い(tthe)にカーソ
     ルを移動しましょう。
  2. x をタイプしていらない文字を削除しましょう。
  3. ここで、u をタイプして最後に実行したコマンドを取り消しましょう。
  4. 今度は、x を使用してこの行の誤りを全て修正しましょう。
  5. 大文字の U をタイプして、行を元の状態に戻しましょう。
  6. u をタイプして直前の U コマンドを取消しましょう。

---> Correct tthe errorr in this sentence and then undo the correctionnn.
     Correct the error in this sentence and then undo the correction.

  8. これは編集操作を間違えたときにとても便利なコマンドです。
     さぁレッスン 2 の要約へ進みましょう。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				レッスン 2 要約

  1. カーソル位置から単語の末尾までを削除するには dw とタイプします。
  2. カーソル位置から行の末尾までを削除するには d$ とタイプします。
  3. 行全体を削除するには dd とタイプします。

  4. モーションを繰り返すには数値を付与します:   2dd
  5. 変更に用いるコマンドの形式は
               オペレータ   [数値]   モーション
     それぞれ:
       オペレータ - d (削除) の様に何をするかの指示。
       数値       - そのコマンドを何回繰り返すか。
       モーション - w (単語)や $ (行末)などの様に、テキストの何に対して働きか
                    けるか。

  6. 行の先頭に移動するにはゼロを使用します:  0
     行末に移動するには　＄　を使用します
  7. 前回の動作を取消す:	u   (小文字 u)
     行全体の変更を取消す:	U   (大文字 U)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			   レッスン 3.1: 貼り付けコマンド


    ** 最後に削除された行をカーソルの後に貼り付けるには p （ペースト）をタイプします **

  1. 以下の段落の最初の行にカーソルを移動しましょう。

  2. dd  とタイプして行を削除します、削除された行はバッファに格納されています。

  3. ペーストはカーソル行の下に挿入されるのでa)の行まで、カーソルを移動させましょう。

  4. ノーマルモードで p をタイプして格納した行を画面に貼り付けます。

  5. 順番が正しくなる様にステップ 2 から 4 を繰り返しましょう。

     d) 貴方も学ぶことができる?
     b) スミレは青い、
     c) 知恵とは学ぶもの、
     a) バラは赤い、

   dd のかわりに yy (ヤンク)とすると、行を消さずにバッファに入れられます
   p のかわりに P とすると、カーソル行の上にペーストされます


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 レッスン 3.2: 置き換えコマンド


	   ** カーソルの下の文字を置き換えるには r をタイプします **
                                                 replace
  1. 以下の ---> と示された最初の行にカーソルを移動しましょう。

  2. 最初の間違いの先頭にカーソルを移動しましょう。

  3. r とタイプし、間違っている文字を置き換える正しい文字をタイプしましょう。
     Colrectのlの位置にカーソルを置いて　rl と入力。
     r が置き換えるのは１文字と定められているので、次の１字(ここではl)を入力すると
 　　自動的にノーマルモードに戻るため、Escする必要がない

  4. 最初の行が正しくなるまでステップ 2 から 3 を繰り返しましょう。

--->  Colrect tho error on this sentense and then unpo the correcsion.
      Correct the error in this sentence and then undo the correction.
  5. さぁ、レッスン 3.2 へ進みましょう。

NOTE: 実際に試しましょう。決して読むだけにはしないこと。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			レッスン 3.3: 変更コマンド


	 ** 単語の一部、もしくは全体を変更するには cw とタイプします **
                                                   change word
  1. 以下の ---> と示された最初の行にカーソルを移動しましょう。

  2. lubw の u の位置にカーソルを移動しましょう。

  3. cw とタイプし、正しい単語をタイプしましょう(この場合 'ine' とタイプ)。

  4. 次の間違い(変更すべき文字の先頭)に移動するために <ESC> をタイプします。

  5. --->の行が次の行の様になるまでステップ 3 と 4 を繰り返します。

---> This lubw has a few wptfd that mrrf changing usf the change command.
     This line has a few words that need changing using the change command.

cw は単語を変更するだけでなく、挿入も行える(より長い単語に置き換えたり、単語を
付け加えたり)もできることに注意しましょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     レッスン 3.4: c を使用したその他の変更


     ** 変更コマンドは、削除コマンドと同じ様にオブジェクトを使用します **

  1. 変更コマンドは、削除コマンドと同じような動作をします。その形式は

         c    [数値]   モーション

  2. オブジェクトも同じで、w は単語、 $ は行末などといったものです。

  3. 以下の ---> と示された行にカーソルを移動しましょう。

  4. 最初の間違いへカーソルを移動しましょう。 (some の s)

  5. c$ とタイプして行の残りを２行目の様にし、<ESC> を押しましょう。

---> The end of this line needs some help to make it look like the second.
     The end of this line needs to be corrected using the c$ command.

NOTE:  タイプ中の間違いはバックスペースキーを使って直すこともできます。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				レッスン 3 要約


  1. 既に削除されたテキストを再配置するには、p をタイプします。これは削除さ
     れたテキストをカーソルの後に挿入します(行単位で削除されたのならば、カー
     ソルのある次の行に挿入されます)。

  2. カーソルの下の文字を置き換えるには、r をタイプした後、それを置き換える
     文字をタイプします。

  3. 変更コマンドではカーソル位置から特定のモーションで指定される終端までを変
     更することが可能です。例えば cw ならばカーソル位置から単語の終わりまで、
     c$ ならば行の終わりまでを変更します。

  4. 変更コマンドの形式は

         c    [数値]   モーション

さぁ、次のレッスンへ進みましょう。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     レッスン 4.1: 位置とファイルの情報

  ** ファイル内でのカーソル位置とファイルの状態を表示するには CTRL-G をタイプします。
     ファイルの最後の行に移動するには G をタイプします **

     NOTE: ステップを実行する前に、このレッスン全てに目を通しましょう!!

  1. CTRL を押したまま g を押しましょう。この操作を CTRL-G と呼んでいます。
     ページの一番下にファイル名と総行数、右下(,の前)に行番号が表示されるはずです。 
     カーソル位置を上下して１つづつ増えたり減ったりする数値が行番号です
     ステップ 3のために行番号をメモしておきましょう。
                       ^^^^^^^^^^^^
     2を実行する前に、この場所に戻ってくるためには　：行番号 <ENTER> と覚えておきましょう
     画面の左に行番号が出ていなければ  :set number として行番号を表示し
　　 画面内の行の位置に移動してみましょう
 
  2. 最下行に移動するために G をタイプしてから、現在の場所に戻ってきましょう
     ファイルの先頭に移動するには gg とタイプしてから、現在の場所に戻ってきましょう

  3. 自信が持てたらステップ 1 から 3 を実行しましょう。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			   レッスン 4.2: 検索コマンド


	 ** 語句を検索するには / と、前方検索する語句をタイプします。**

  1. ノーマルモードで / という文字をタイプします。画面一番下に : コマンドと
     同じ様に / が現れることに気づくでしょう。

  2. 続いて  errroor<ENTER> とタイプしましょう。これが検索したい単語です。

  3. 同じ語をもう一度検索するときは 単に n をタイプします。
     逆方向(上方)に語句を検索するときは N をタイプします。

  4. 最初から上方に語句を検索する場合は、/ の代わりに ? コマンドを使用します。
     ?errroor<ENTER>

  5. 元の場所に戻るには CTRL-O (Ctrl を押し続けながら o 文字タイプ)をタイプし
     ます。さらに戻るにはこれを繰り返します。CTRL-I は前方向です。

Note: "errroor" は error とスペルが違います;  errroor はいわゆる error です。
Note: 検索がファイルの終わり(下端)に達すると、ファイルの先頭から検索を続行します。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		      レッスン 4.3: 対応する括弧を検索


	    ** 対応する ),] や } を検索するには % をタイプします **

  1. 下の ---> で示された行で (,[ か { のどれかにカーソルを移動しましょう。

  2. そこで % とタイプしましょう。

  3. カーソルは対応する括弧(その括弧が閉じる場所)に移動するはずです。

  4. もう一度最初の括弧に移動するには % とタイプしましょう。

  5. 他の (,),[,],{ や } でカーソルを移動し、% が何をしているか確認しましょう。

---> This ( is a test line with ('s, ['s ] and {'s } in it. ))


NOTE: この機能は括弧が一致していないプログラムをデバッグするのにとても役立ち
      ます。
      vimの初期設定で、カッコの上にカーソルを置くと対応するカッコとともに
　　　水色で示されているかもしれません

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       レッスン 4.4: 間違いを一括して変更する方法


  ** 行内の'old' をすべて 'new' に置換するには :s/old/new/g とタイプします **

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. :s/thee/the/ <ENTER> とタイプしましょう。このコマンドはその行で最初に見
     つかったものにだけ行なわれることに気をつけましょう。
     一旦 u を押して元に戻します

  3. では :s/thee/the/g	とタイプしましょう。行全体を置換することを意味します。
     この変更はその行で見つかった全ての箇所に対して行なわれます。

---> thee best time to see thee flowers is in thee spring.

  4. 複数行から見つかる文字を変更するには
     :#,#s/old/new/g    #,# には置き換える範囲の開始と終了の行番号を指定しま
                        す。 最初から最後でよければ、1,$s/old/new/g とする。
     :%s/old/new/g      ファイル全体で見つかるものに対して変更する。
     :%s/old/new/gc     ファイル全体で見つかるものに対して、1つ1つ確認をとりな
                        がら変更する。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				レッスン 4 要約


  1. CTRL-G はファイルでの位置とファイルの詳細を表示します。
          G はファイルの最下行に移動します。
     数値 G はその行に移動します。
         gg は先頭行に移動します。

  2. / の後に語句をタイプすると前方(下)に語句を検索します。
     ? の後に語句をタイプすると後方(上)に語句を検索します。
     検索の後の n は同じ方向の次の検索を、N は逆方向の検索をします。
     CTRL-O は前の検索結果に移り、CTRL-I は場所を次に移動します。

  3. (,),[,],{, もしくは } 上にカーソルがある状態で % をタイプすると対になる文
     字へ移動します。

  4. 現在行の最初の old を new に置換する。	:s/old/new/
     現在行の全ての old を new に置換する。	:s/old/new/g
     2つの # 間で語句を置換する。		:#,#s/old/new/g
     ファイルの中の全ての検索語句を置換する。	:%s/old/new/g
     'c' を加えると置換の度に確認を求める。	:%s/old/new/gc

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		    レッスン 5.1: その他のファイルへ書き込み


	** ファイルへ変更を保存するには :w ファイル名 とタイプします **

  1. TEST のように、vimを立ち上げたディレクトリに無いファイル名を一つ選びます。

  3. では :w TEST とタイプしましょう (TEST は、選んだファイル名です)。

  4. これによりファイル全体が TEST という名前で保存されます。

Note: ここで Vim を終了し、ファイル名 TEST と共に起動すると、
      現在のファイルの状態で、vimの練習が続けられます


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 レッスン 5.2: 画面上で選択した箇所のファイルへの書き込み


** ファイルの特定の箇所を保存するには、ビジュアルモードで箇所を指定し :w FILENAME をタイプします。 **

  1. この行にカーソルを移動します。

  2. v を押し、jキーを何度か押して以下の第5項目までカーソルを移動します。
     選択されるテキストが強調表示されるのに注目して下さい。

  3. 文字 : を押すと、画面の最下部に :'<,'> が現れます。

  4. w BLOCK(BLOCK は存在しないファイル名)をタイプします。
     Enter を押す前に最下行の表示が :'<,'>w BLOCK となっていることを確認して下さい。

  5. Vim は BLOCK というファイルに選択された行を書き込みます
     次のレッスンでファイルに書き出された部分テキストを現在の画面に挿入します

NOTE:  v を押すと、Visualモードでの 選択が始まります。カーソルを動かすことで、
       選択範囲を 大きくも小さくもできます。その選択範囲に対してオペレータを
       適用できます。例えば d は選択領域を削除、y は選択領域をバッファに記憶します

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		       レッスン 5.3: ファイルの取込と合併


	** ファイルの中身を挿入するには :r ファイル名 とタイプします **
                                         restore
  1. カーソルを下の ---> の行に合わせます。

  2. では BLOCK というファイルを :r BLOCK というコマンドで読み込みましょう。
     ここでいう BLOCK は読み込むファイルの名前のことです。
     読み込まれたファイルの中身がカーソルの下に挿入されます

  3. 取込んだファイルの内容を確認してみましょう。

NOTE: 外部コマンドの出力を読み込むことも出来ます。例えば、
      :r !ls はカレントディレクトリで実行する ls コマンドの出力をカーソル以下
      に読み込みます。

--->


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       レッスン 5 要約

  1.  :w ファイル名 によってファイル名というファイルがディスクに書き込まれる。

  2.  v モーションで :w FILENAME とすると、ビジュアル選択行がファイルに保存さ
      れる。

  3.  :r ファイル名 によりファイル名というファイルがディスクより取込まれ、
      カーソル位置の下に挿入される。

  4.  :r !ls は ls コマンドの出力をカーソル位置以下に読み込む。



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			 レッスン 6.1: オープンコマンド


    ** o をタイプすると、カーソルの下の行が開き、挿入モードに入ります **

  1. 以下の ---> と示された行にカーソルを移動しましょう。

  2. o (小文字) をタイプして、カーソルの下の行を開き、挿入モードに入ります。

  3. さらに挿入モードを終了する為に <ESC> をタイプします。

---> o  をタイプするとカーソルは開いた行へ移動し挿入モードに入ります。

  4. カーソルの上の行に挿入するには、小文字の o ではなく、単純に大文字の O
     をタイプします。次の行で試してみましょう。

---> この行の上へ挿入するには、この行へカーソルを置いて O をタイプします。


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			レッスン 6.2: 追加コマンド

      ** カーソルの次の位置からテキストを追加するには a とタイプします **
                                                      append
  1. カーソルを ---> で示された行へ移動しましょう。

  2. e を押して li の終端部(iの上)までカーソルを移動します。

  3. カーソルの後ろにテキストを追加するために a (小文字) をタイプします。

  4. その下の行のような単語に変更します。挿入モードを抜ける為に <ESC> に押
     します。

  5. e を使って次の不完全な単語へ移動し、ステップ 3 と 4 を繰り返します。
  
---> This li will allow you to pract appendi text to a line.
     This line will allow you to practice appending text to a line.

Note: i と a は同じ様に挿入モードへ移りますが、文字が挿入される位置だけが異なり
      ます。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			レッスン 6.3: その他の置換方法


	  ** 1文字以上を置き換えるには大文字の R とタイプしましょう **
                                               Replace
  1. 以下の ---> と示された行にカーソルを移動します。最初の xxx の先頭に移動し
     ます。

  2. R を押して、2行目の数値(456)をタイプすることで、xxx が置換されます。

  3. 置換モードを抜けるには <ESC> を押します。行の残りが変更されていないままに
     なることに注意してください。

  5. 残った xxx をステップを繰り返して置換しましょう。

---> Adding 123 to xxx gives you xxx.
     Adding 123 to 456 gives you 579.

NOTE: 置換モードは挿入モードに似ていますが、全てのタイプされた文字は既存の文字
      を上書きします


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		   レッスン 6.4: テキストのコピーとペースト


     ** テキストのコピーにはオペレータ y を、ペーストには p を使います **
                                       yank               paste

  1. ---> と示された行へ移動し、カーソルを "a)" の後のスペースに置いておきます。
  
  2. v でビジュアルモードを開始し、"first"の手前までカーソルを移動します。
  
  3. y をタイプして強調表示されたテキストを yank (コピー)します。

  4. 次の行の行末までカーソルを移動します:  j$

  5. p を押して貼り付け(put)てから、次をタイプします:  a second <ESC>

  6. ビジュアルモードで " item." を選択し、y でヤンク、次の行の行末まで j$ で
     移動し、 p でテキストをそこに put します。

--->  a) This is the first item.
      b) 

  Note: 単語を1つ yank するのに y をオペレータとして yw とすることも出来ます。
        1行 yank は yy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		       レッスン 6.5: オプションの設定


  ** 検索や置換の際に大文字/小文字を無視するには、オプションを設定します **

  1. 次の様に入力して 'ignore' を検索しましょう:  /ignore  <ENTER>
     n を押して何度か検索を繰り返します。
     ignoreがあるのはこの周辺（レッスン６．５の中とレッスン６要約の中）だけです

  2. :set ic  の様に入力して 'ic' (Ignore Case の略) オプションを設定します  

  3. では /ignore <ENTER> とn によってもう1度 ignore の検索をくりかえします。

  4. hlsearch = hls オプションを設定しましょう:  :set hls

  5. 検索コマンドを再入力して、何が起こるか見てみましょう:  /ignore  <ENTER>

  6. 元のように大文字小文字の区別をするには次の様に入力します:  :set noic

Note: マッチの強調表示をやめるには次の様に入力します: :nohlsearch

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				レッスン 6 要約

  1. o をタイプするとカーソルの下の行を開けて、そこで挿入モードになる。
     O (大文字) をタイプするとカーソルの上の行で挿入モードになる。

  2. カーソル上の文字の次からテキストを追加するには a とタイプする。
     行末に自動でテキストを挿入するには大文字 A をタイプする。

  3. e コマンドは単語の終端へカーソルを移動する。

  4. y オペレータはテキストを yank (コピー)し、p はそれを put (ペースト)する。

  5. 大文字の R をタイプすると置換モードに入り、<ESC>を押すと抜ける。

  6. ":set xxx" とタイプするとオプション "xxx" が設定される。
  	'ic' 'ignorecase'　	検索時に大文字小文字を区別しない
	'hls' 'hlsearch'	マッチするすべてを強調表示する
     長い方、短い方、どちらのオプション名でも使用できます。

  7. "no" を付与し、オプションを無効にします:  :set noic

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  これにて Vim のチュートリアルを終わります。エディタを簡単に、しかも充分に
  使うことができるようにと、Vim の持つ概念の要点のみを伝えようとしました。
  Vim にはさらに多くのコマンドがあり、ここで全てを説明することはできません。
  以降はユーザマニュアルを参照ください: "help :user-manual"

  これ以後の学習のために、次の本を推薦します。
	Vim - Vi Improved - by Steve Oualline
	出版社: New Riders
  最初の本は完全に Vim のために書かれました。とりわけ初心者にはお奨めです。
  多くの例題や図版が掲載されています。
  次のURLを参照して下さい http://iccf-holland.org/click5.html

  次は Vim よりも Vi について書かれた古い本ですが推薦します:
	Learning the Vi Editor - by Linda Lamb
	出版社: O'Reilly & Associates Inc.
  Vi でやりたいと思うことほぼ全てを知ることができる良書です。
  第6版では、Vim についての情報も含まれています。

  このチュートリアルは Colorado State University の Charles Smith のアイデア
  を基に、Colorado School of Mines の Michael C. Pierce と Robert K. Ware の
  両名によって書かれました。 E-mail: bware@mines.colorado.edu.

  Modified for Vim by Bram Moolenaar.

  日本語訳  松本 泰弘  <mattn_jp@hotmail.com>
  監修      村岡 太郎  <koron@tka.att.ne.jp>

  前橋工科大学での講義用に編集　２０２４年５月４日　中村 建介

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
